---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-front
spec:
  replicas: 2
  selector:
    matchLabels:
      app: front
  template:
    metadata:
      labels:
        app: front
    spec: 
      containers:
        - name: front-app
          image: mafadegrande/frontgoapp:dev
          ports:
            - containerPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-back
spec:
  replicas: 2
  selector:
    matchLabels:
      app: back
  template:
    metadata:
      labels:
        app: back
    spec: 
      containers:
        - name: back-app
          image: mafadegrande/backgoapp:dev
          ports:
            - containerPort: 8080
          env:
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: mongo-user 
            - name: DB_COLLECTION_NAME
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: mongo-user
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: mongo-user
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: mongo-password
            - name: DB_URL
              valueFrom:
                configMapKeyRef:
                  name: mongo-config
                  key: mongo-url
            - name: DB_URI
              value: mongodb://$(DB_USER):$(DB_PASSWORD)@$(DB_URL)
          resources:
            limits:
              cpu: 700m
              memory: 256Mi
            requests:
              cpu: 200m
              memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: front-service
spec:
  selector:
    app: front
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: back-service
spec:
  type: NodePort
  selector:
    app: back
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 31000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-front
spec:
  ingressClassName: nginx
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: front-service
                port:
                  number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-back
spec:
  ingressClassName: nginx
  rules:
    - http:
        paths:
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: back-service
                port:
                  number: 8080
